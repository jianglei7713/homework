
1 说明列表的浅拷贝和深拷贝的区别

浅拷贝:对于可变对象,浅拷贝不会产生新的内存地址,只会产生对象的引用
       对于不可变对象,浅拷贝会产生新的内存地址,将对象的最顶层复制

深拷贝: 会递归复制一个对象的所有层次的内容,
        一定会产生新的内存地址

列表是可变对象,但是列表的元素可以是可变对象,也可以是不可变对象

列表的浅拷贝和深拷贝都会会产生一个内存地址不相同的新列表

如果列表的元素是不可变对象,浅拷贝产生的新列表与原列表没有关联
如果列表的元素是可变对象,浅拷贝产生的新列表中该元素的变化会和原列表对应位置的元素相互影响

深拷贝产生的列表和原列表各元素之间相互独立,没有任何影响

2 说明列表和元组的相同点和不同点

相同点:都是有序,可索引,可迭代的连续线性序列
不同的:列表是可变对象,元组是不可变对象
       由于元组不可变,所以元组没有对元素进行增,删,改的方法
       


3 写出字符串支持的所有方法及说明

l = str()

格式化

l.format() 返回格式化后的字符串
l.format_map(mapping) 返回格式化后产生的新字符串,其中mapping是一个字典

查找

l.index('sub',[start,[,end]]) 在字符串指定区间[start,end)中从左至右查找子串sub
                              找到后立即返回正索引,没有则抛出异常

l.rindex('sub')  查找子串,只是查找顺序改为从右至左,返回正索引,没有则抛出异常

l.find('sub'[,start[,end]]) 从左至右查找子串,返回正索引,没有则返回-1

l.rfind('sub'[,start[,end]]) 从右至左查找子串,返回正索引,没有则返回-1

l.count('sub'[,start[,end]]) 在指定区间[start,end),从左至右，统计子串'sub'出现的次数,返回此统计数

l.endwith('suffix'[,start[,end]]) 在指定区间[start,end),判断字符串是否以suffix结尾,返回布尔值

l.startwith('suffix'[,start[,end]]) 在指定区间[start,end),判断字符串是否以suffix开始,返回布尔值

切割

l.split(sep=None, maxsplit=-1) 将字符串按分隔符(默认是空白符)切割成多个子串,返回子串组成的列表

l.rsplit()  从字符串右边开始切割,同样返回子串的列表,注意子串顺序不变

l.splitlines(False) 按换行符切割,默认不保留尾部的换行符,同样返回新列表

l.partition(sep) 将字符串按照分隔符切割成2段,返回这2段和分隔符组成的三元组
                 
l.rpartition(sep)  同上,只是从右至左查找分隔符,返回三元组


替换

l.replace(old,new[,count])  将字符串中的old部分替换成new,count为替换次数,返回替换后的新字符串

l.maketrans(oldtab,newtab) 创建字符串的替换映射表,返回一个字典
l.translate(table) 按照替换映射表,逐次替换原字符串中的单个字符,返回替换后的新列表

l.strip([chars]) 将字符串开头和结尾去除字符集chars中的所有字符,返回新的字符串
                 如果chars没有指定,去除两端的空白字符

l.lstrip() 同上,只去除左边的字符

l.lstrip() 同上,只去除右边的字符

l.expandtabs(tabsize=8) 将原字符串中的tab换成空格符.默认换成8个空格符.返回新的字符串



拼接

l.join(iterable) 将可迭代对象使用字符串为分隔符拼接起来,返回一个新的字符串
                 可迭代对象的元素必须也是字符串

大小写

l.upper() 返回字符串的小写,仅ASII编码有效

l.lower() 返回字符串的大写
l.casefold() 返回字符串的小写,对其它语言也生效

l.swapcase() 将字符串中的大小写交互,返回新字符串

判断
以下方法全部返回布尔值

l.isalnum() ->bool 是否是字母和数字组成
l.isalpha()        是否是字母
l.isdecimal()      是否只包含十进制数字
l.isdigit()        是否只包含数字(0-9)
l.isidentifier()   是不是标识符，即；字母和下划线开头，其它都是字母，数字，下划线
l.islower()        是否全部小写
l.isupper()        是否全部大写
l.isspace()        是否只包含空白符
l.istitle()        是否是标题格式,即每个单词第一个字母大写,单词中其它字母小写

排版

l.title() 将字符串变为标题格式,返回新字符串

l.capitallizer() 将行首的第一个字符变为大写,其它所有字符小写,返回新字符串

l.center(width, fillchar=None) 返回一个新字符串,宽度为width,确保原字符串在新字符串正中心
                               原字符串中心对应

l.zfill(width)  返回新字符串,宽度为width,原字符串在新字符串右边,其它位置用0填充
                字符0左填充,原字符串右对齐

l.rjust(width, fillchar=None) 返回新字符串,宽度为width,原字符串在新字符串右边,其它部分由填充符填充
                              右对齐

l.ljust(width, fillchar=None) 同上,原字符串在新字符串左边,其它部分填充
                              左对齐

编码

l.encode(encoding='utf-8', errors='strict') 将字符串编码,返回字节











































